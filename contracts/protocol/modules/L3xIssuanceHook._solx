/*
    Copyright 2021 IndexZoo Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    SPDX-License-Identifier: Apache License, Version 2.0
*/

pragma solidity 0.6.10;
pragma experimental "ABIEncoderV2";

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";

import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import { IController } from "../../interfaces/IController.sol";
import { IUniswapV2Router } from "../../interfaces/external/IUniswapV2Router.sol";
import { ILendingPool } from "../../interfaces/external/aave-v2/ILendingPool.sol";
import { ILendingPoolAddressesProvider } from "../../interfaces/external/aave-v2/ILendingPoolAddressesProvider.sol";
import { ILendingAdapter } from "../../interfaces/ILendingAdapter.sol";
import { IExchangeAdapterV3 } from "../../interfaces/IExchangeAdapterV3.sol";
import { IPriceOracleGetter } from "../../interfaces/external/aave-v2/IPriceOracleGetter.sol";
import { Invoke } from "../lib/Invoke.sol";
import { ISetToken } from "../../interfaces/ISetToken.sol";
import { IssuanceValidationUtils } from "../lib/IssuanceValidationUtils.sol";
import { PreciseUnitMath } from "../../lib/PreciseUnitMath.sol";
import { Position } from "../lib/Position.sol";
import { ModuleBase } from "../lib/ZooModuleBase.sol";
import { L3xUtils } from "../lib/L3xUtils.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import "hardhat/console.sol";

/**
 * @title L3xIssuanceHook
 * @author IndexZoo Ltd.
 *
 * The L3xIssuanceModule is a module that enables users to issue and redeem Leveraged Tokens that wrap a base token 
 * including debt positions. Module hooks are added to allow for syncing of debt, 
 * to ensure debts are replicated correctly. 
 * 
 * @dev Note that current state of the contract is for testing the feasibility of achieving ~ 3x Leverage
 * @dev Next stage most of that logic will be invoked from the SetToken (or ZooToken)
 * @dev SetToken will be changed as balance of (LevToken) (previously setToken) will be reflected by debt with AAVE 
 * 
 * NOTE: 
 */
 /**
  */ 



contract L3xIssuanceHook is  ReentrancyGuard, Ownable {
    using Position for ISetToken;
    using L3xUtils for ISetToken;
    using SafeMath for uint256;
    using PreciseUnitMath for uint256;
    using L3xUtils for L3xUtils.LendingCallInfo;
    
    /* ==================== Struct ============================= */

    struct LocalModuleConfig {
        ILendingPool lender;
        IUniswapV2Router router;
        ILendingPoolAddressesProvider addressesProvider;
        uint256 amountPerUnitCollateral;                 // Amount to be borrowed for each unit of collateral in Eth

    }
    
    /* ============ Events ============ */
    
    event ConfigSetForToken(
        ISetToken indexed _setToken,
        LocalModuleConfig _config
    );

    /* ==================== Constants ================================ */

    uint256 private constant BORROW_PORTION_FACTOR = 0.999 ether;

    // IntegrationRegistry providing calldata for this module
    uint256 private constant INTEGRATION_REGISTRY_RESOURCE_ID = 0;

    string private constant AAVE_ADAPTER_NAME = "AAVE";
    uint256 private constant STD_SCALER = 1 ether;
   
    /* ==================== State Variables ========================== */

    /**
     * LocalModuleConfig configuration for module
     * configuration for a selected token 
     * GlobalConfig makes up for the unconfigured token 
     * lender i.e. Aave / router i.e. Uniswap
     */
    mapping(address => LocalModuleConfig) public configs;

    IController public controller;

    /* ============ Constructor ============ */
    /**
     * 
     * @param controller_  Address of controller meant to be managing the module 
     */
    
    constructor(IController controller_) public  {
        controller = controller_;
    }

    /* ============ Modifiers ====================*/
    /**
     * Throws if the sender is not a SetToken's module or module not enabled
     */
    modifier onlyModule(ISetToken _setToken) {
        _validateOnlyModule(_setToken);
        _;
    }

    /* ============ External Functions ============ */

    // /**
    //  * Mints Leverage token for investor
    //  * @dev If setToken is bullish
    //  * Deposits the base asset of that token on AAVE (i.e. WETH)
    //  * Borrows quoteToken (i.e. DAI)
    //  * Amount borrowed is derived from getUserAccountData() call provided by LendingPool
    //  * Module does not directly invoke methods as these calls are being invoked by the Zoo Token
    //  * Tokens minted for user (caller) are proportion to the amount deposited and borrowed
    //  *

    //  * @param zooToken_     Instance of the ZooToken to configure
    //  * @param to_               Address of beneficiary receiver of token
    //  * @param quantity_         Quantity of quote token input to go long 
    //  * @param price_            price of baseToken (i.e. ETH) in quoteToken (i.e. DAI)
    //  * @param swapFactorx1000_  The accepted portion of quantity_ to get through after deduction from fees. 
    //  * This is taking place during the processes of swapping & borrowing (i.e. about 985)
    //  */
    // //  _setToken, _setTokenQuantity, _component, _isEquity
    // function componentIssueHook (
    //     ISetToken zooToken_,
    //     address to_,
    //     uint256 quantity_,
    //     uint256 price_,
    //     uint256 swapFactorx1000_  // TODO: to be replaced by slippage
    // )
    //     external
    //     nonReentrant
    //     onlyModule(zooToken_)
    // {
    //     uint256 depositAmount  = _prepareAmountInForIssue (zooToken_, msg.sender, quantity_, price_, swapFactorx1000_);
        
    //     // @note Borrow quoteToken from lending Protocol
    //     // @note totalAmountOut represents exposure
    //     (
    //         uint256 totalAmountOut, 
    //         uint256 totalAmountDebt
    //     )  =  _iterativeBorrow(zooToken_, depositAmount, swapFactorx1000_, price_);
    //     _mintZoos(zooToken_, to_, totalAmountOut, totalAmountDebt);
    // }

    // TODO: Owner function to create DebtPool


    /**
     * Administrative calls: to be called by Manager only
     * @param zooToken_     Instance of the ZooToken to configure
     * @param config_       Configuration data 
     */
     function setConfigForToken(
         address zooToken_,
         LocalModuleConfig calldata config_
    )
    external
    onlyOwner
    {
        // TODO: do not allow to change lender
        uint256 amountPerUnitCollateral = config_.amountPerUnitCollateral;
        require(amountPerUnitCollateral > 0, "Zero amountPerCollateral unallowed");
        configs[zooToken_].addressesProvider = config_.addressesProvider;
        configs[zooToken_].lender = config_.lender;
        configs[zooToken_].router = config_.router;
        configs[zooToken_].amountPerUnitCollateral = amountPerUnitCollateral;

        emit ConfigSetForToken(ISetToken(zooToken_), config_);
    }


    /* ============== View Functions ===================*/
    /**
     * Get address of LendingPool 
     * Get configuration stored in GlobalConfig if no LocalModuleConfig for this token is stored

     * @param zooToken_      Instance of the ZooToken to configure
     * @return ILendingPool  address of lending pool to borrow from and deposit to
     */
    function getLender(ISetToken zooToken_) public view returns (ILendingPool ) 
    {
        ILendingPool local = configs[address(zooToken_)].lender;
        return local; 
    }

    /**
     * Get address of uniswap-like router 
     * Get configuration stored in GlobalConfig if no LocalModuleConfig for this token is stored

     * @param zooToken_          Instance of the ZooToken to configure
     * @return IUniswapV2Router  address of uniswap-like router for swaps 
     */
    function getRouter(ISetToken zooToken_) public view returns (IUniswapV2Router ) 
    {
        IUniswapV2Router local = configs[address(zooToken_)].router;
        return  local; 
    }

    /**
     * Get address of addresses provider for LendingPool 
     * Get configuration stored in GlobalConfig if no LocalModuleConfig for this token is stored

     * @param zooToken_                         Instance of the ZooToken to configure
     * @return ILendingPoolAddressesProvider    address of  AddressesProvider
     */
    function getAddressesProvider(ISetToken zooToken_) public view returns (ILendingPoolAddressesProvider ) 
    {
        ILendingPoolAddressesProvider local = configs[address(zooToken_)].addressesProvider;
        return local; 
    }

    /* ============ Internal Functions ============ */

    // /**
    //  * Create and return TradeInfo struct
    //  *
    //  * @param zooToken_             Instance of the ZooToken to trade
    //  * @param lenderName_           Human readable name of the lender in the integrations registry
    //  * @param asset_                Address of the underlying token to be borrowed 
    //  * @param amount_               Amount of underlying token to be borrowed 
    //  *
    //  * @return LendingCallInfo             Struct containing data for trade
    //  */
    // function _createLendingCallInfo(
    //     ISetToken zooToken_,
    //     string memory lenderName_,
    //     address asset_,
    //     uint256 amount_
    // )
    //     internal
    //     view
    //     returns (L3xUtils.LendingCallInfo memory)
    // {
    //     L3xUtils.LendingCallInfo memory borrowInfo;
    //     borrowInfo.zooToken = zooToken_;
    //     borrowInfo.lendingAdapter = ILendingAdapter(_getAndValidateAdapter(lenderName_));
    //     borrowInfo.asset = asset_;
    //     borrowInfo.amount = amount_;
    //     return borrowInfo;
    // }


    /* ==================================== Private functions ===================================== */

    /**
     * Hashes the string and returns a bytes32 value
     */
    function _getNameHash(string memory _name) internal pure returns(bytes32) {
        return keccak256(bytes(_name));
    }

    /**
     * Gets the integration for the module with the passed in name. Validates that the address is not empty
     */
    function _getAndValidateAdapter(string memory _integrationName) private view returns(address) { 
        bytes32 integrationHash = _getNameHash(_integrationName);
        return _getAndValidateAdapterWithHash(integrationHash);
    }

    /**
     * Gets the integration for the module with the passed in hash. Validates that the address is not empty
     */
    function _getAndValidateAdapterWithHash(bytes32 _integrationHash) private view returns(address) { 
        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(
            msg.sender,                  // Caller Module
            _integrationHash
        );

        require(adapter != address(0), "Must be valid adapter"); 
        return adapter;
    }

    /**
     * Prepare input amount by investor before issuing zoo tokens
     * Swap input token if zoo token is bullish
     * @param zooToken_                         Instance of the ZooToken to trade
     * @param creditor_                         Payer of input amount
     * @param depositAmountInStableC_           Amount in by creditor
     * @param depositAssetPrice_                Price of base asset against quote asset
     * @param swapFactorx1000_                  Account for swapping fees by dex
     * @return amountOut                        Amount to be initially deposited in LendingPool 
     */
    function _prepareAmountInForIssue(
        ISetToken zooToken_,
        address creditor_,
        uint256 depositAmountInStableC_,
        uint256 depositAssetPrice_,
        uint256 swapFactorx1000_
    )
    private
    returns (uint256 amountOut) 
    {
        IERC20(zooToken_.pair().quote).transferFrom(creditor_, address(zooToken_), depositAmountInStableC_);
        if(zooToken_.zooIsBull()){
           IExchangeAdapterV3 adapter = IExchangeAdapterV3(_getAndValidateAdapter("UNISWAP"));
           amountOut = zooToken_.swapQuoteAndBase(adapter, getRouter(zooToken_), depositAmountInStableC_, _multiplyByFactorSwap(depositAmountInStableC_, swapFactorx1000_, depositAssetPrice_)); 
        }
        else {
            amountOut = depositAmountInStableC_;
        }
    }

    // /** 
    //  * Deposit asset in LendingPool and borrow the other asset against the deposited one.
    //  * Process is iterative till achieving required leverage

    //  * @param zooToken_                         Instance of the ZooToken to trade
    //  * @param depositAmount_                    Initial amount to be deposited 
    //  * @param swapFactorx1000_                  Account for swapping fees by dex
    //  * @param price_                            Price of base asset against quote asset
    //  * @return totalAmountOut                   Amount of zoo to be minted for investor 
    //  * @return totalAmountDebt                  Amount of debt to be recorded on investor
    //  */
    // function _iterativeBorrow(
    //     ISetToken zooToken_,
    //     uint256 depositAmount_,
    //     uint256 swapFactorx1000_,
    //     uint256 price_
    // )
    // private
    // returns (
    //     uint256 totalAmountOut,
    //     uint256 totalAmountDebt
    // )
    // {
    //     uint256 borrowAmount;
    //     totalAmountOut = depositAmount_;

    //     IExchangeAdapterV3 adapter = IExchangeAdapterV3(_getAndValidateAdapter("UNISWAP"));
    //     for (uint8 i = 0; i < 3; i++) {
    //         borrowAmount = _borrowAgainstCollateral(zooToken_, depositAmount_ );
    //         depositAmount_ = zooToken_.swapQuoteAndBase(adapter, getRouter(zooToken_), borrowAmount, _multiplyByFactorSwap(borrowAmount, swapFactorx1000_, price_));

    //         totalAmountOut = totalAmountOut.add(depositAmount_);
    //         totalAmountDebt = totalAmountDebt.add(borrowAmount);
    //     }

    // }

    /**
     * Mint zoo token
     * @param zooToken_                         Instance of the ZooToken to trade
     * @param to_                               Address of investor to_ to receive zoo token
     * @param exposure_                         Amount to be minted (before inflating)
     * @param debt_                             Debt to be incurred on to_
     */
    function _mintZoos(
        ISetToken zooToken_,
        address to_,
        uint256 exposure_,
        uint256 debt_
    )
    private 
    {
        zooToken_.addDebt(to_, debt_);
        uint256 positionMultiplier = uint256(zooToken_.positionMultiplier());
        uint256 mints = exposure_.mul(PreciseUnitMath.preciseUnit()).div(positionMultiplier);
        zooToken_.mint(to_, mints);
        require(mints !=  0, "L3xIssueMod: Leveraging failed");
    }
    // /**
    //  * Borrow token (i.e. quote stable coin) in case of going long.  
    //  * Borrow the base token (e.g. Weth) in case of going short 
    //  * @param zooToken_             Instance of the ZooToken to trade
    //  * @param depositAmount_        Amount to be initally deposited
    //  */
    // function _borrowAgainstCollateral(
    //     ISetToken zooToken_,
    //     uint256 depositAmount_
    // )
    // private
    // returns (uint256 notionalBorrowAmount)
    // {
    //     address dAsset = zooToken_.zooIsBull() ? zooToken_.pair().base:zooToken_.pair().quote;
    //     ILendingPool lender_ = getLender(zooToken_);
    //     zooToken_.invokeApprove( dAsset, address(lender_) , depositAmount_);

    //     L3xUtils.LendingCallInfo memory depositInfo = _createLendingCallInfo(
    //         zooToken_, 
    //         AAVE_ADAPTER_NAME, 
    //         dAsset, 
    //         depositAmount_
    //     );
    //     depositInfo.invokeDeposit();
    //     // approve lender to receive swapped baseToken
    //     notionalBorrowAmount = _borrowAvailableAmount(
    //         zooToken_, 
    //         AAVE_ADAPTER_NAME, 
    //         depositAmount_, 
    //         configs[address(zooToken_)].amountPerUnitCollateral
    //     );
    //     require(notionalBorrowAmount > 0, "L3xIssuanceModule: Borrowing unsuccessful");
    // }



    // /**
    //  * Instigates ZooToken to borrow amount of token from Lender based on deposited collateral
    //  */ 
    // function _borrowAvailableAmount(
    //     ISetToken zooToken_,
    //     string memory lenderName_,
    //     uint256 addedCollateral,
    //     uint256 amountPerUnitCollateral
    // )
    // private
    // returns (
    //     uint256 amountToBorrow
    // )
    // {
    //     address bAsset = zooToken_.zooIsBull()? zooToken_.pair().quote:zooToken_.pair().base; // borrowToken

    //     uint256 availableBorrows = addedCollateral.preciseMul(BORROW_PORTION_FACTOR);
    //     availableBorrows = availableBorrows.preciseMul(amountPerUnitCollateral);
    //     address oracle =  getAddressesProvider(zooToken_).getPriceOracle();

    //     // borrow 99.9% of what available (otherwise reverts)
    //     amountToBorrow =  zooToken_.getEquivalentAmountViaOraclePrice(
    //         oracle, 
    //         availableBorrows,
    //         [L3xUtils.PPath.DepositAsset, L3xUtils.PPath.BorrowAsset]
    //     );
    //     // amountToBorrow = availableBorrows.mul(dTokenPriceInETH).div(bTokenPriceInETH);
    //     L3xUtils.LendingCallInfo memory borrowInfo = _createLendingCallInfo(
    //         zooToken_, 
    //         lenderName_, 
    //         bAsset,
    //         amountToBorrow 
    //     );
    //     borrowInfo.invokeBorrow();
    // }

    function _multiplyByFactorSwap(
        uint256 amount_,
        uint256 factorx1000_,
        uint256 price_
    )
    private
    pure
    returns (uint256)
    {
        return amount_.mul(factorx1000_).div(1000).preciseDiv(price_);
    }



    /**
     * Caller must be initialized module and module must be enabled on the controller
     */
    function _validateOnlyModule(ISetToken _setToken) internal view {
        require(
            _setToken.moduleStates(msg.sender) == ISetToken.ModuleState.INITIALIZED,
            "Only the module can call"
        );

        require(
            controller.isModule(msg.sender),
            "Module must be enabled on controller"
        );
    }
}